import base64
encoded_kod = "#!/usr/bin/env python3

import time
import random
import hashlib
import requests
from collections import defaultdict
from rich.console import Console
from rich.table import Table
from rich.progress import track
from alive_progress import alive_bar

console = Console()

class HashCracker:
    VERSION = "0.0.1"
    DESCRIPTION = "Passdoom Hash Cracker"
    AUTHOR = "CqLi"
    WORDLIST_CREATOR = "Wordlist King CqLi"
    WORDLIST_URLS = [
        'https://raw.githubusercontent.com/CqLi-Fi/Passdoom-Wordlist/refs/heads/main/Wordlist/turkish.txt',
        'https://raw.githubusercontent.com/CqLi-Fi/Passdoom-Wordlist/refs/heads/main/Wordlist/turkish2.txt',
        'https://raw.githubusercontent.com/CqLi-Fi/Passdoom-Wordlist/refs/heads/main/Wordlist/english.txt',
        'https://raw.githubusercontent.com/CqLi-Fi/Passdoom-Wordlist/refs/heads/main/Wordlist/numbers.txt',
        'https://raw.githubusercontent.com/CqLi-Fi/Passdoom-Wordlist/refs/heads/main/Wordlist/data11_2024.txt',
        'https://raw.githubusercontent.com/CqLi-Fi/Passdoom-Wordlist/refs/heads/main/Wordlist/ftp.txt',
        'https://raw.githubusercontent.com/kkrypt0nn/wordlists/refs/heads/main/wordlists/passwords/bt4_passwords.txt',
        'https://raw.githubusercontent.com/kkrypt0nn/wordlists/refs/heads/main/wordlists/passwords/md5decryptor.txt'
    ]

    def __init__(self, filename=None):
        self.display_intro_animation()
        if filename:
            self.filename = filename
            self.md5_hashes = []
            self.sha1_hashes = []
            self.found_hashes = {}
            self.unfound_hashes = []
            self.cache = defaultdict(str)
            self.load_hashes()
            self.load_cache()
            self.wordlist = self.load_wordlist()
        else:
            self.display_usage_instructions()

    def display_intro_animation(self):
        """Displays the matrix-style intro animation."""
        console.print("\n[bold green]Passdoom Hash Cracker[/bold green]\n", style="bold green")
        animation_characters = [
            "A.B.G.E.R.T.Y.R.W.E.Q.W.E.RW.",
            "1.3.4.25.26.36.3.6.3.3.7.3.63.2",
            "+%&//%+%&/()=?=(/&++^",
            "@#$%&*()!^+=-[]{};:,./<>?"
        ]
        
        for _ in range(30):
            console.print(
                random.choice(animation_characters),
                style="bold cyan" if random.randint(0, 1) else "bold green"
            )
            time.sleep(0.03)
        
        time.sleep(1)
        console.print("[bold cyan]--- Welcome to Passdoom ---[/bold cyan]")
        time.sleep(1)

    def display_usage_instructions(self):
        console.print("[yellow]Usage example: python3 passdoom.py hash.txt[/yellow]\n")
        console.print(f"[yellow]{self.DESCRIPTION} {self.VERSION}[/yellow]")
        console.print(f"[yellow]{self.AUTHOR} - {self.WORDLIST_CREATOR}\n[/yellow]")

    def load_hashes(self):
        with open(self.filename, 'r') as file:
            for line in file:
                line = line.strip()
                if len(line) == 32 and all(c in '0123456789abcdefABCDEF' for c in line):
                    self.md5_hashes.append(line.lower())
                elif len(line) == 40 and all(c in '0123456789abcdefABCDEF' for c in line):
                    self.sha1_hashes.append(line.lower())

        console.print(f"[green]Loaded {len(self.md5_hashes)} unique MD5 hashes[/green]")
        console.print(f"[green]Loaded {len(self.sha1_hashes)} unique SHA1 hashes[/green]")

    def crack(self):
        console.print("[yellow]Starting to crack hashes...[/yellow]")
        self.crack_hashes(self.md5_hashes, "MD5")
        self.crack_hashes(self.sha1_hashes, "SHA1")
        self.display_results()

    def crack_hashes(self, hashes, hash_type):
        for hash_val in track(hashes, description=f"Cracking {hash_type} hashes"):
            plaintext = self.cache.get(hash_val)
            if plaintext:
                self.found_hashes[hash_val] = plaintext
                console.print(f"[cyan]{hash_val}: {plaintext} (from cache)[/cyan]")
                continue

            plaintext = self.crack_with_wordlist(hash_val, hash_type)
            if plaintext:
                console.print(f"[green]{hash_val}: {plaintext}[/green]")
                self.found_hashes[hash_val] = plaintext
                self.append_to_cache(hash_val, plaintext)
            else:
                console.print(f"[red]{hash_val}: Not found[/red]")
                self.unfound_hashes.append(hash_val)
            time.sleep(0.5)

    def crack_with_wordlist(self, hash_val, hash_type):
        with alive_bar(len(self.wordlist), bar='classic2', title=f"Checking wordlist for {hash_type}") as bar:
            for word in self.wordlist:
                if (hash_type == "MD5" and hashlib.md5(word.encode()).hexdigest() == hash_val) or \
                   (hash_type == "SHA1" and hashlib.sha1(word.encode()).hexdigest() == hash_val):
                    return word
                bar()
        return None

    def load_cache(self, filename="cache"):
        try:
            with open(filename, 'r') as file:
                for line in file:
                    if ":" in line:
                        hash_val, plaintext = line.strip().split(":", 1)
                        self.cache[hash_val] = plaintext
        except FileNotFoundError:
            pass

    def append_to_cache(self, hash_val, plaintext, filename="cache"):
        with open(filename, "a") as file:
            file.write(f"{hash_val}:{plaintext}\n")

    def load_wordlist(self):
        wordlist = []
        for url in self.WORDLIST_URLS:
            response = requests.get(url)
            wordlist.extend(response.text.splitlines())

        console.print(f"[green]Loaded wordlist with {len(wordlist)} entries[/green]")
        return wordlist

    def display_ascii_art(self):
        console.print("""
[cyan]
@@@@@@@@    @@@@@@    @@@@@@    @@@@@@   @@@@@@@    @@@@@@    @@@@@@   @@@@@@@@@@   
@@@@@@@@@  @@@@@@@@  @@@@@@@   @@@@@@@   @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@@@@  
@@!  @@@  @@!  @@@  !@@       !@@       @@!  @@@  @@!  @@@  @@!  @@@  @@! @@! @@!  
!@!  @!@  !@!  @!@  !@!       !@!       !@!  @!@  !@!  @!@  !@!  @!@  !@! !@! !@!  
@!@@!@!   @!@!@!@!  !!@@!!    !!@@!!    @!@  !@!  @!@  !@!  @!@  !@!  @!! !!@ @!@  
!!@!!!    !!!@!!!!   !!@!!!    !!@!!!   !@!  !!!  !@!  !!!  !@!  !!!  !@!   ! !@!  
!!:       !!:  !!!       !:!       !:!  !!:  !!!  !!:  !!!  !!:  !!!  !!:     !!:  
:!:       :!:  !:!      !:!       !:!   :!:  !:!  :!:  !:!  :!:  !:!  :!:     :!:  
 ::       ::   :::  :::: ::   :::: ::    :::: ::  ::::: ::  ::::: ::  :::     ::   
 :         :   : :  :: : :    :: : :    :: :  :    : :  :    : :  :    :      :    
                                                                                 version 0.0.1
[/cyan]
        """)

    def display_results(self):
        """Displays the results of the hash cracking process."""
        if self.found_hashes:
            console.print("\n[bold green]Cracked Hashes:[/bold green]")
            for hash_val, plaintext in self.found_hashes.items():
                console.print(f"[green]{hash_val} : {plaintext}[/green]")
            console.print("[bold cyan]Remember, don't hurt anyone, but have fun![/bold cyan]")
        
        if self.unfound_hashes:
            console.print("\n[bold red]Uncracked Hashes:[/bold red]")
            for hash_val in self.unfound_hashes:
                console.print(f"[red]{hash_val} : Not found[/red]")
            console.print("[bold yellow]Looks like these ones are playing hide and seek![/bold yellow]")

if __name__ == '__main__':
    import sys
    if len(sys.argv) == 2:
        HashCracker(sys.argv[1]).crack()
    else:
        HashCracker()
"
exec(base64.b64decode(encoded_kod).decode("utf-8"))
